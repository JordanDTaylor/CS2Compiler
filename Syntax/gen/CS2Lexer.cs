//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Ming Slogar/Downloads/CS2Compiler-master\CS2.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class CS2Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TYPE_BOOL=1, TYPE_INT=2, TYPE_DOUBLE=3, TYPE_STRING=4, TYPE_VOID=5, FALSE=6, 
		TRUE=7, IF=8, ELSE=9, FOR=10, WHILE=11, CONST=12, RETURN=13, PRIVATE=14, 
		PROTECTED=15, PUBLIC=16, SINGLE_QUOTE=17, DOUBLE_QOUTE=18, COMMA=19, OPEN_BRACKET=20, 
		CLOSE_BRACKET=21, OPEN_PAREN=22, CLOSE_PAREN=23, OPEN_BRACE=24, CLOSE_BRACE=25, 
		SEMICOLON=26, PLUS=27, MINUS=28, STAR=29, DIV=30, PERCENT=31, AMP=32, 
		BITWISE_OR=33, CARET=34, BANG=35, TILDE=36, ASSIGNMENT=37, LT=38, GT=39, 
		INTERR=40, DOUBLE_COLON=41, OP_COALESCING=42, OP_INC=43, OP_DEC=44, OP_AND=45, 
		OP_OR=46, OP_PTR=47, OP_EQ=48, OP_NE=49, OP_LE=50, OP_GE=51, REAL=52, 
		INTEGER=53, ID=54, LETTER=55, DIGIT=56, WS=57;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TYPE_BOOL", "TYPE_INT", "TYPE_DOUBLE", "TYPE_STRING", "TYPE_VOID", "FALSE", 
		"TRUE", "IF", "ELSE", "FOR", "WHILE", "CONST", "RETURN", "PRIVATE", "PROTECTED", 
		"PUBLIC", "SINGLE_QUOTE", "DOUBLE_QOUTE", "COMMA", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "SEMICOLON", 
		"PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", 
		"BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
		"OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", 
		"OP_GE", "REAL", "INTEGER", "ID", "LETTER", "DIGIT", "WS"
	};


	public CS2Lexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'bool'", "'int'", "'double'", "'string'", "'void'", "'false'", 
		"'true'", "'if'", "'else'", "'for'", "'while'", "'const'", "'return'", 
		"'private'", "'protected'", "'public'", "'''", "'\"'", "','", "'['", "']'", 
		"'('", "')'", "'{'", "'}'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'::'", 
		"'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", "'<='", 
		"'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TYPE_BOOL", "TYPE_INT", "TYPE_DOUBLE", "TYPE_STRING", "TYPE_VOID", 
		"FALSE", "TRUE", "IF", "ELSE", "FOR", "WHILE", "CONST", "RETURN", "PRIVATE", 
		"PROTECTED", "PUBLIC", "SINGLE_QUOTE", "DOUBLE_QOUTE", "COMMA", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", 
		"SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", 
		"CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", 
		"OP_COALESCING", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
		"OP_NE", "OP_LE", "OP_GE", "REAL", "INTEGER", "ID", "LETTER", "DIGIT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CS2.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static CS2Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2;\x14B");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t");
		sb.Append("\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3");
		sb.Append("\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3");
		sb.Append("\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18");
		sb.Append("\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3");
		sb.Append("\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"");
		sb.Append("\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3)");
		sb.Append("\x3)\x3*\x3*\x3*\x3+\x3+\x3+\x3,\x3,\x3,\x3-\x3-\x3-\x3.\x3");
		sb.Append(".\x3.\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31");
		sb.Append("\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3");
		sb.Append("\x34\x3\x35\x3\x35\a\x35\x128\n\x35\f\x35\xE\x35\x12B\v\x35");
		sb.Append("\x3\x35\x3\x35\x6\x35\x12F\n\x35\r\x35\xE\x35\x130\x5\x35\x133");
		sb.Append("\n\x35\x3\x36\x6\x36\x136\n\x36\r\x36\xE\x36\x137\x3\x37\x3");
		sb.Append("\x37\a\x37\x13C\n\x37\f\x37\xE\x37\x13F\v\x37\x3\x38\x3\x38");
		sb.Append("\x3\x39\x3\x39\x3:\x6:\x146\n:\r:\xE:\x147\x3:\x3:\x2\x2;\x3");
		sb.Append("\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19");
		sb.Append("\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18");
		sb.Append("/\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= ?!\x41\"");
		sb.Append("\x43#\x45$G%I&K\'M(O)Q*S+U,W-Y.[/]\x30_\x31\x61\x32\x63\x33");
		sb.Append("\x65\x34g\x35i\x36k\x37m\x38o\x39q:s;\x3\x2\a\x5\x2\x43\\\x61");
		sb.Append("\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x4\x2\x43\\\x63|\x3");
		sb.Append("\x2\x32;\x5\x2\v\f\xF\xF\"\"\x150\x2\x3\x3\x2\x2\x2\x2\x5\x3");
		sb.Append("\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2");
		sb.Append("\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13");
		sb.Append("\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3");
		sb.Append("\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2");
		sb.Append("\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'");
		sb.Append("\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2");
		sb.Append("\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35");
		sb.Append("\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2");
		sb.Append("\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2");
		sb.Append("\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2");
		sb.Append("\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3");
		sb.Append("\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x2");
		sb.Append("Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2_\x3\x2\x2\x2");
		sb.Append("\x2\x61\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2\x2\x2");
		sb.Append("g\x3\x2\x2\x2\x2i\x3\x2\x2\x2\x2k\x3\x2\x2\x2\x2m\x3\x2\x2\x2");
		sb.Append("\x2o\x3\x2\x2\x2\x2q\x3\x2\x2\x2\x2s\x3\x2\x2\x2\x3u\x3\x2\x2");
		sb.Append("\x2\x5z\x3\x2\x2\x2\a~\x3\x2\x2\x2\t\x85\x3\x2\x2\x2\v\x8C\x3");
		sb.Append("\x2\x2\x2\r\x91\x3\x2\x2\x2\xF\x97\x3\x2\x2\x2\x11\x9C\x3\x2");
		sb.Append("\x2\x2\x13\x9F\x3\x2\x2\x2\x15\xA4\x3\x2\x2\x2\x17\xA8\x3\x2");
		sb.Append("\x2\x2\x19\xAE\x3\x2\x2\x2\x1B\xB4\x3\x2\x2\x2\x1D\xBB\x3\x2");
		sb.Append("\x2\x2\x1F\xC3\x3\x2\x2\x2!\xCD\x3\x2\x2\x2#\xD4\x3\x2\x2\x2");
		sb.Append("%\xD6\x3\x2\x2\x2\'\xD8\x3\x2\x2\x2)\xDA\x3\x2\x2\x2+\xDC\x3");
		sb.Append("\x2\x2\x2-\xDE\x3\x2\x2\x2/\xE0\x3\x2\x2\x2\x31\xE2\x3\x2\x2");
		sb.Append("\x2\x33\xE4\x3\x2\x2\x2\x35\xE6\x3\x2\x2\x2\x37\xE8\x3\x2\x2");
		sb.Append("\x2\x39\xEA\x3\x2\x2\x2;\xEC\x3\x2\x2\x2=\xEE\x3\x2\x2\x2?\xF0");
		sb.Append("\x3\x2\x2\x2\x41\xF2\x3\x2\x2\x2\x43\xF4\x3\x2\x2\x2\x45\xF6");
		sb.Append("\x3\x2\x2\x2G\xF8\x3\x2\x2\x2I\xFA\x3\x2\x2\x2K\xFC\x3\x2\x2");
		sb.Append("\x2M\xFE\x3\x2\x2\x2O\x100\x3\x2\x2\x2Q\x102\x3\x2\x2\x2S\x104");
		sb.Append("\x3\x2\x2\x2U\x107\x3\x2\x2\x2W\x10A\x3\x2\x2\x2Y\x10D\x3\x2");
		sb.Append("\x2\x2[\x110\x3\x2\x2\x2]\x113\x3\x2\x2\x2_\x116\x3\x2\x2\x2");
		sb.Append("\x61\x119\x3\x2\x2\x2\x63\x11C\x3\x2\x2\x2\x65\x11F\x3\x2\x2");
		sb.Append("\x2g\x122\x3\x2\x2\x2i\x132\x3\x2\x2\x2k\x135\x3\x2\x2\x2m\x139");
		sb.Append("\x3\x2\x2\x2o\x140\x3\x2\x2\x2q\x142\x3\x2\x2\x2s\x145\x3\x2");
		sb.Append("\x2\x2uv\a\x64\x2\x2vw\aq\x2\x2wx\aq\x2\x2xy\an\x2\x2y\x4\x3");
		sb.Append("\x2\x2\x2z{\ak\x2\x2{|\ap\x2\x2|}\av\x2\x2}\x6\x3\x2\x2\x2~");
		sb.Append("\x7F\a\x66\x2\x2\x7F\x80\aq\x2\x2\x80\x81\aw\x2\x2\x81\x82\a");
		sb.Append("\x64\x2\x2\x82\x83\an\x2\x2\x83\x84\ag\x2\x2\x84\b\x3\x2\x2");
		sb.Append("\x2\x85\x86\au\x2\x2\x86\x87\av\x2\x2\x87\x88\at\x2\x2\x88\x89");
		sb.Append("\ak\x2\x2\x89\x8A\ap\x2\x2\x8A\x8B\ai\x2\x2\x8B\n\x3\x2\x2\x2");
		sb.Append("\x8C\x8D\ax\x2\x2\x8D\x8E\aq\x2\x2\x8E\x8F\ak\x2\x2\x8F\x90");
		sb.Append("\a\x66\x2\x2\x90\f\x3\x2\x2\x2\x91\x92\ah\x2\x2\x92\x93\a\x63");
		sb.Append("\x2\x2\x93\x94\an\x2\x2\x94\x95\au\x2\x2\x95\x96\ag\x2\x2\x96");
		sb.Append("\xE\x3\x2\x2\x2\x97\x98\av\x2\x2\x98\x99\at\x2\x2\x99\x9A\a");
		sb.Append("w\x2\x2\x9A\x9B\ag\x2\x2\x9B\x10\x3\x2\x2\x2\x9C\x9D\ak\x2\x2");
		sb.Append("\x9D\x9E\ah\x2\x2\x9E\x12\x3\x2\x2\x2\x9F\xA0\ag\x2\x2\xA0\xA1");
		sb.Append("\an\x2\x2\xA1\xA2\au\x2\x2\xA2\xA3\ag\x2\x2\xA3\x14\x3\x2\x2");
		sb.Append("\x2\xA4\xA5\ah\x2\x2\xA5\xA6\aq\x2\x2\xA6\xA7\at\x2\x2\xA7\x16");
		sb.Append("\x3\x2\x2\x2\xA8\xA9\ay\x2\x2\xA9\xAA\aj\x2\x2\xAA\xAB\ak\x2");
		sb.Append("\x2\xAB\xAC\an\x2\x2\xAC\xAD\ag\x2\x2\xAD\x18\x3\x2\x2\x2\xAE");
		sb.Append("\xAF\a\x65\x2\x2\xAF\xB0\aq\x2\x2\xB0\xB1\ap\x2\x2\xB1\xB2\a");
		sb.Append("u\x2\x2\xB2\xB3\av\x2\x2\xB3\x1A\x3\x2\x2\x2\xB4\xB5\at\x2\x2");
		sb.Append("\xB5\xB6\ag\x2\x2\xB6\xB7\av\x2\x2\xB7\xB8\aw\x2\x2\xB8\xB9");
		sb.Append("\at\x2\x2\xB9\xBA\ap\x2\x2\xBA\x1C\x3\x2\x2\x2\xBB\xBC\ar\x2");
		sb.Append("\x2\xBC\xBD\at\x2\x2\xBD\xBE\ak\x2\x2\xBE\xBF\ax\x2\x2\xBF\xC0");
		sb.Append("\a\x63\x2\x2\xC0\xC1\av\x2\x2\xC1\xC2\ag\x2\x2\xC2\x1E\x3\x2");
		sb.Append("\x2\x2\xC3\xC4\ar\x2\x2\xC4\xC5\at\x2\x2\xC5\xC6\aq\x2\x2\xC6");
		sb.Append("\xC7\av\x2\x2\xC7\xC8\ag\x2\x2\xC8\xC9\a\x65\x2\x2\xC9\xCA\a");
		sb.Append("v\x2\x2\xCA\xCB\ag\x2\x2\xCB\xCC\a\x66\x2\x2\xCC \x3\x2\x2\x2");
		sb.Append("\xCD\xCE\ar\x2\x2\xCE\xCF\aw\x2\x2\xCF\xD0\a\x64\x2\x2\xD0\xD1");
		sb.Append("\an\x2\x2\xD1\xD2\ak\x2\x2\xD2\xD3\a\x65\x2\x2\xD3\"\x3\x2\x2");
		sb.Append("\x2\xD4\xD5\a)\x2\x2\xD5$\x3\x2\x2\x2\xD6\xD7\a$\x2\x2\xD7&");
		sb.Append("\x3\x2\x2\x2\xD8\xD9\a.\x2\x2\xD9(\x3\x2\x2\x2\xDA\xDB\a]\x2");
		sb.Append("\x2\xDB*\x3\x2\x2\x2\xDC\xDD\a_\x2\x2\xDD,\x3\x2\x2\x2\xDE\xDF");
		sb.Append("\a*\x2\x2\xDF.\x3\x2\x2\x2\xE0\xE1\a+\x2\x2\xE1\x30\x3\x2\x2");
		sb.Append("\x2\xE2\xE3\a}\x2\x2\xE3\x32\x3\x2\x2\x2\xE4\xE5\a\x7F\x2\x2");
		sb.Append("\xE5\x34\x3\x2\x2\x2\xE6\xE7\a=\x2\x2\xE7\x36\x3\x2\x2\x2\xE8");
		sb.Append("\xE9\a-\x2\x2\xE9\x38\x3\x2\x2\x2\xEA\xEB\a/\x2\x2\xEB:\x3\x2");
		sb.Append("\x2\x2\xEC\xED\a,\x2\x2\xED<\x3\x2\x2\x2\xEE\xEF\a\x31\x2\x2");
		sb.Append("\xEF>\x3\x2\x2\x2\xF0\xF1\a\'\x2\x2\xF1@\x3\x2\x2\x2\xF2\xF3");
		sb.Append("\a(\x2\x2\xF3\x42\x3\x2\x2\x2\xF4\xF5\a~\x2\x2\xF5\x44\x3\x2");
		sb.Append("\x2\x2\xF6\xF7\a`\x2\x2\xF7\x46\x3\x2\x2\x2\xF8\xF9\a#\x2\x2");
		sb.Append("\xF9H\x3\x2\x2\x2\xFA\xFB\a\x80\x2\x2\xFBJ\x3\x2\x2\x2\xFC\xFD");
		sb.Append("\a?\x2\x2\xFDL\x3\x2\x2\x2\xFE\xFF\a>\x2\x2\xFFN\x3\x2\x2\x2");
		sb.Append("\x100\x101\a@\x2\x2\x101P\x3\x2\x2\x2\x102\x103\a\x41\x2\x2");
		sb.Append("\x103R\x3\x2\x2\x2\x104\x105\a<\x2\x2\x105\x106\a<\x2\x2\x106");
		sb.Append("T\x3\x2\x2\x2\x107\x108\a\x41\x2\x2\x108\x109\a\x41\x2\x2\x109");
		sb.Append("V\x3\x2\x2\x2\x10A\x10B\a-\x2\x2\x10B\x10C\a-\x2\x2\x10CX\x3");
		sb.Append("\x2\x2\x2\x10D\x10E\a/\x2\x2\x10E\x10F\a/\x2\x2\x10FZ\x3\x2");
		sb.Append("\x2\x2\x110\x111\a(\x2\x2\x111\x112\a(\x2\x2\x112\\\x3\x2\x2");
		sb.Append("\x2\x113\x114\a~\x2\x2\x114\x115\a~\x2\x2\x115^\x3\x2\x2\x2");
		sb.Append("\x116\x117\a/\x2\x2\x117\x118\a@\x2\x2\x118`\x3\x2\x2\x2\x119");
		sb.Append("\x11A\a?\x2\x2\x11A\x11B\a?\x2\x2\x11B\x62\x3\x2\x2\x2\x11C");
		sb.Append("\x11D\a#\x2\x2\x11D\x11E\a?\x2\x2\x11E\x64\x3\x2\x2\x2\x11F");
		sb.Append("\x120\a>\x2\x2\x120\x121\a?\x2\x2\x121\x66\x3\x2\x2\x2\x122");
		sb.Append("\x123\a@\x2\x2\x123\x124\a?\x2\x2\x124h\x3\x2\x2\x2\x125\x133");
		sb.Append("\x5k\x36\x2\x126\x128\x5q\x39\x2\x127\x126\x3\x2\x2\x2\x128");
		sb.Append("\x12B\x3\x2\x2\x2\x129\x127\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2");
		sb.Append("\x12A\x12C\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12C\x12E\a\x30");
		sb.Append("\x2\x2\x12D\x12F\x5q\x39\x2\x12E\x12D\x3\x2\x2\x2\x12F\x130");
		sb.Append("\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131");
		sb.Append("\x133\x3\x2\x2\x2\x132\x125\x3\x2\x2\x2\x132\x129\x3\x2\x2\x2");
		sb.Append("\x133j\x3\x2\x2\x2\x134\x136\x5q\x39\x2\x135\x134\x3\x2\x2\x2");
		sb.Append("\x136\x137\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x137\x138\x3\x2");
		sb.Append("\x2\x2\x138l\x3\x2\x2\x2\x139\x13D\t\x2\x2\x2\x13A\x13C\t\x3");
		sb.Append("\x2\x2\x13B\x13A\x3\x2\x2\x2\x13C\x13F\x3\x2\x2\x2\x13D\x13B");
		sb.Append("\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13En\x3\x2\x2\x2\x13F\x13D");
		sb.Append("\x3\x2\x2\x2\x140\x141\t\x4\x2\x2\x141p\x3\x2\x2\x2\x142\x143");
		sb.Append("\t\x5\x2\x2\x143r\x3\x2\x2\x2\x144\x146\t\x6\x2\x2\x145\x144");
		sb.Append("\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x147");
		sb.Append("\x148\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14A\b:\x2\x2\x14A");
		sb.Append("t\x3\x2\x2\x2\t\x2\x129\x130\x132\x137\x13D\x147\x3\x2\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
